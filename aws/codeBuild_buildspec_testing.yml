---
version: 0.2
# bookingtime GmbH
# 22.06.2022 19:48:37
# v1.2.0
# see: https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html

env:
  secrets-manager:
    DOCKERHUB_USERNAME: '/codeBuild/sourceCredential/dockerHub:username'
    DOCKERHUB_ACCESS_TOKEN: '/codeBuild/sourceCredential/dockerHub:token'
    GITHUB_USERNAME: '/codeBuild/sourceCredential/gitHub:username'
    GITHUB_ACCESS_TOKEN: '/codeBuild/sourceCredential/gitHub:token'

phases:
  pre_build:
    commands:
      - 'echo "preparing build on `date`" ; pwd ; ls -lah' # use 'printenv' to see environtment vars
      - 'echo "start testing build for repo $REPO with CODEBUILD_SOURCE_VERSION $CODEBUILD_SOURCE_VERSION"'

      - 'echo "Login to docker hub..."'
      - 'echo $DOCKERHUB_ACCESS_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin'

      - 'echo "Login to GitHub docker repository..."'
      - 'echo $GITHUB_ACCESS_TOKEN | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin'

      - 'echo "Composer authentication..."'
      - 'COMPOSER_AUTH="{\"github-oauth\":{\"github.com\":\"$GITHUB_ACCESS_TOKEN\"}}"'

      - 'echo "Login to Amazon ECR $IMAGE_ECR_URL with region $AWS_REGION"'
      - 'if [ ! -z "$IMAGE_ECR_URL" ] ; then aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $IMAGE_ECR_URL ; else echo "No IMAGE_ECR_URL found -> skip!" ; fi'
  build:
    commands:
      - 'echo "Build started on `date`" ; pwd ; ls -lah'

      - 'echo "Linting AWS YAML files..."'
      - 'docker run --rm --mount type=bind,source=$(pwd)/aws,destination=/tolint ghcr.io/bookingtime/yamllint:latest >> ./test_results.txt'

      - 'echo "Building the Docker image in test environment ..."'
      - 'docker pull $IMAGE_REPO_URL:testing || true'
      - 'docker build --cache-from $IMAGE_REPO_URL:testing --build-arg APP_ENV=test --build-arg COMPOSER_AUTH --build-arg NPM_TOKEN=$GITHUB_ACCESS_TOKEN --tag $REPO:testing .'
      - 'docker tag $REPO:testing $IMAGE_REPO_URL:testing'
      - 'export DOCKER_BUILD_SUCCEEDING=1'

      - 'echo "Validate composer.json..."'
      - 'echo "\n\n\n$(docker run --rm --name composerTest $REPO:testing composer --no-ansi validate 2>&1)\n\n\n" >> ./test_results.txt'

      - 'echo "Run tests..."'
      - 'echo "Start tests..." | docker run --rm --interactive --name github-comment --env GITHUB_ACCESS_TOKEN --env CODEBUILD_SOURCE_VERSION --env REPO ghcr.io/bookingtime/github-comment:latest'
      - 'docker run --rm --name runtest --env BT_DISABLE_PROFILER_IN_TESTS=1 $REPO:testing ./bin/phpunit -c phpunit.xml.test >> ./test_results.txt'
  post_build:
    commands:
      - 'echo "Build completed on `date`" ; pwd ; ls -lah'
      - 'if [ -f "./test_results.txt" ] ; then cat ./test_results.txt ; fi'

      - 'echo "Add comment to gitHub pull request..."'
      - 'if [ -f "./test_results.txt" ] ; then cat test_results.txt | docker run --rm --interactive --name github-comment --env GITHUB_ACCESS_TOKEN --env CODEBUILD_SOURCE_VERSION --env REPO ghcr.io/bookingtime/github-comment:latest ; fi'
      - 'if [ "$CODEBUILD_BUILD_SUCCEEDING" = 1 ] ; then echo "All tests succeded." | docker run --rm --interactive --name github-comment --env GITHUB_ACCESS_TOKEN --env CODEBUILD_SOURCE_VERSION --env REPO ghcr.io/bookingtime/github-comment:latest ; fi'
      - 'if [ "$CODEBUILD_BUILD_SUCCEEDING" = 0 ] ; then echo "Tests failed!" | docker run --rm --interactive --name github-comment --env GITHUB_ACCESS_TOKEN --env CODEBUILD_SOURCE_VERSION --env REPO ghcr.io/bookingtime/github-comment:latest ; fi'

      - 'echo "Pushing the Docker image to $IMAGE_REPO_URL:testing ECR for future cache usage (DOCKER_BUILD_SUCCEEDING=$DOCKER_BUILD_SUCCEEDING)..."'
      - 'if [ "$DOCKER_BUILD_SUCCEEDING" = 1 ] ; then docker push $IMAGE_REPO_URL:testing ; fi'
